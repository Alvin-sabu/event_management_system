name: Deploy Django to EC2 and Run Load Tests

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # Daily backup at midnight UTC

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Set up SSH for EC2 access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 Host to Known Hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

    - name: Build Docker Image
      run: |
        DOCKER_BUILDKIT=1 docker build -t alvinksabu/django-app:latest .

    - name: Push Docker Image to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        docker push alvinksabu/django-app:latest

    - name: Deploy to EC2
      run: |
        ssh ubuntu@${{ secrets.EC2_PUBLIC_IP }} '
          sudo apt-get update &&
          if ! command -v docker &> /dev/null; then
            sudo apt-get install -y docker.io docker-compose &&
            sudo systemctl start docker &&
            sudo systemctl enable docker
          fi &&
          cd /home/ubuntu/event_management_system &&
          git clean -f &&
          git pull origin main &&
          sudo docker-compose down &&
          sudo docker-compose pull &&
          sudo docker-compose up -d
        '

    - name: Run Django Migrations
      run: |
        ssh ubuntu@${{ secrets.EC2_PUBLIC_IP }} '
          cd /home/ubuntu/event_management_system &&
          sudo docker-compose exec -T web python manage.py migrate
        '

    - name: Health Check
      run: |
        STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" http://${{ secrets.EC2_PUBLIC_IP }})
        echo "Received status code: $STATUS_CODE"
        if [ "$STATUS_CODE" -ne 200 ]; then
          echo "Health check failed, rolling back..."
          ssh ubuntu@${{ secrets.EC2_PUBLIC_IP }} '
            cd /home/ubuntu/event_management_system &&
            sudo docker-compose down &&
            sudo docker pull alvinksabu/django-app:previous &&
            sudo docker-compose up -d
          '
          exit 1
        else
          echo "Deployment successful."
        fi

    - name: Install Locust
      run: |
        pip install locust

    - name: Run Load Tests
      run: |
        cat << EOF > locustfile.py
        from locust import HttpUser, task, between

        class QuickstartUser(HttpUser):
            wait_time = between(1, 5)

            @task
            def index_page(self):
                self.client.get("/")

            @task(3)
            def view_item(self):
                item_id = 1
                self.client.get(f"/item/{item_id}", name="/item")
        EOF

        locust --headless -f locustfile.py --host http://${{ secrets.EC2_PUBLIC_IP }} --users 50 --spawn-rate 5 --run-time 1m

    - name: Analyze Load Test Results
      run: |
        # Add your analysis logic here
        # For example, you could check the Locust statistics file and fail the workflow if certain thresholds are not met
        echo "Load test completed. Analyze the results to ensure performance meets expectations."
